{"ast":null,"code":"import { vModelText as _vModelText, withKeys as _withKeys, createElementVNode as _createElementVNode, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, vShow as _vShow } from \"vue\";\nconst _hoisted_1 = {\n  class: \"autocomplete\"\n};\nconst _hoisted_2 = {\n  class: \"autocomplete-results\"\n};\nconst _hoisted_3 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.search = $event),\n    onInput: _cache[1] || (_cache[1] = (...args) => $options.onChange && $options.onChange(...args)),\n    onKeydown: [_cache[2] || (_cache[2] = _withKeys((...args) => $options.onArrowDown && $options.onArrowDown(...args), [\"down\"])), _cache[3] || (_cache[3] = _withKeys((...args) => $options.onArrowUp && $options.onArrowUp(...args), [\"up\"])), _cache[4] || (_cache[4] = _withKeys((...args) => $options.onEnter && $options.onEnter(...args), [\"enter\"]))],\n    type: \"text\"\n  }, null, 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  ), [[_vModelText, $data.search]]), _withDirectives(_createElementVNode(\"ul\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.results, (result, i) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      class: _normalizeClass([\"autocomplete-result\", {\n        'is-active': i === $data.arrowCounter\n      }]),\n      key: i,\n      onClick: $event => $options.setResult(result)\n    }, _toDisplayString(result), 11\n    /* TEXT, CLASS, PROPS */\n    , _hoisted_3);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))], 512\n  /* NEED_PATCH */\n  ), [[_vShow, $data.isOpen]])]);\n}","map":{"version":3,"mappings":";;AACOA,OAAK,EAAC;;;AASLA,OAAK,EAAC;;;;uBATZC,oBAkBM,KAlBN,cAkBM,iBAjBJC,oBAOE,OAPF,EAOE;+DANOC,eAAMC,OAMb;AALDC,WAAK,yCAAEC,+CAAF,CAKJ;AAJDC,aAAO,oDAAOD,uDAAW,UAAlB,mDACKA,mDAAS,QADd,mDAEQA,+CAAO,WAFf,CAIN;AADFE,QAAI,EAAC;AACH,GAPF;;AAAA,oBACSL,eAgBL,kBATJD,oBAQK,IARL,cAQK,oBAPHD,oBAMKQ,SANL,EAMK,IANL,EAMKC,YALkBP,aAKlB,EALyB,CAArBQ,MAAqB,EAAbC,CAAa,KAAZ;yBADlBX,oBAMK,IANL,EAMK;AANDD,WAAK,mBAAC,qBAAD,EAAsB;AAAA,qBAGNY,CAAC,KAAKT;AAHA,OAAtB,EAMJ;AAL4BU,SAAG,EAAED,CAKjC;AAJFE,aAAK,YAAER,mBAAUK,MAAV;AAIL,KANL,mBAKKA,OALL,EAKW;AAAA;AALX,MAKWI,UALX;GAMK,CANL;;AAAA,GAOG,EARL;;AAAA,eAAyCZ,eASrC,CAlBN","names":["class","_createElementBlock","_createElementVNode","$data","$event","onInput","$options","onKeydown","type","_Fragment","_renderList","result","i","key","onClick","_hoisted_3"],"sourceRoot":"","sources":["/home/sammyb/gee_collections/gee_collections_vue/src/components/SearchAutoComplete.vue"],"sourcesContent":["<template>\n  <div class=\"autocomplete\">\n    <input \n    v-model=\"search\" \n    @input=\"onChange\" \n    @keydown.down=\"onArrowDown\"\n    @keydown.up=\"onArrowUp\"\n    @keydown.enter=\"onEnter\"\n    type=\"text\"\n    />\n    <ul class=\"autocomplete-results\" v-show=\"isOpen\">\n      <li class=\"autocomplete-result\"\n       v-for=\"(result, i) in results\" :key=\"i\"\n        @click=\"setResult(result)\"\n        :class=\"{ 'is-active': i === arrowCounter }\"\n        >\n        {{ result }}\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'SearchAutocomplete',\n  props: {\n    items: {\n      type: Array,\n      required: false,\n      default: () => [],\n    },\n  },\n  data() {\n    return {\n      search: '',\n      results: [],\n      isOpen: false,\n      arrowCounter: -1\n    };\n  },\n  beforeMount(){\n    this.search = this.$store.state.productSearch\n  },\n  mounted() {\n    document.addEventListener('click', this.handleClickOutside);\n  },\n  updated(){\n    this.$nextTick(()=>{\n      this.$store.state.productSearch = this.search\n    })\n  },\n  destroyed() {\n    document.removeEventListener('click', this.handleClickOutside);\n  },\n  methods: {\n    filterResults() {\n      let newArray = []\n      for (let i=0 ; i<this.items.length ; i++){\n        newArray.push(this.items[i].name)\n      }\n      this.results = newArray.filter(item => item.toLowerCase().indexOf(this.search.toLowerCase()) > -1);\n    },\n    onChange() {\n      this.filterResults();\n      this.isOpen = true;\n      this.$store.state.isProductSearched = false;\n    },\n    setResult(result) {\n      this.search = result;\n      this.isOpen = false;\n      this.$store.state.isProductSearched = true;\n      this.$router.push('/search')\n      this.$store.state.isProductSearched = false;\n    },\n    handleClickOutside(event) {\n      if (!this.$el.contains(event.target)) {\n        this.arrowCounter = -1;\n        this.isOpen = false;\n      }\n    },\n    onArrowDown() {\n      if (this.arrowCounter < this.results.length) {\n        this.arrowCounter = this.arrowCounter + 1;\n      }\n    },\n    onArrowUp() {\n      if (this.arrowCounter > 0) {\n        this.arrowCounter = this.arrowCounter - 1;\n      }\n    },\n    onEnter() {\n      this.search = this.results[this.arrowCounter];\n      this.arrowCounter = -1;\n      this.isOpen = false;\n      this.$store.state.isProductSearched = true;\n    },\n  },\n};\n</script>\n\n<style>\n  .autocomplete {\n    position: relative;\n  }\n\n  .autocomplete-results {\n    padding: 0;\n    margin: 0;\n    border: 1px solid #eeeeee;\n    height: 120px;\n    min-height: 1em;\n    max-height: 6em;    \n    overflow: auto;\n    display: block;\n  }\n\n  .autocomplete-result {\n    list-style: none;\n    text-align: left;\n    padding: 4px 2px;\n    cursor: pointer;\n  }\n\n  .autocomplete-result.is-active,\n  .autocomplete-result:hover {\n    background-color: #4AAE9B;\n    color: white;\n  }\n</style>"]},"metadata":{},"sourceType":"module"}