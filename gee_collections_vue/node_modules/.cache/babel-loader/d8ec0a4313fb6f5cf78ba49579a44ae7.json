{"ast":null,"code":"\"use strict\";\n\nfunction paginate(totalItems, currentPage, pageSize, maxPages) {\n  if (currentPage === void 0) {\n    currentPage = 1;\n  }\n\n  if (pageSize === void 0) {\n    pageSize = 10;\n  }\n\n  if (maxPages === void 0) {\n    maxPages = 10;\n  } // calculate total pages\n\n\n  var totalPages = Math.ceil(totalItems / pageSize); // ensure current page isn't out of range\n\n  if (currentPage < 1) {\n    currentPage = 1;\n  } else if (currentPage > totalPages) {\n    currentPage = totalPages;\n  }\n\n  var startPage, endPage;\n\n  if (totalPages <= maxPages) {\n    // total pages less than max so show all pages\n    startPage = 1;\n    endPage = totalPages;\n  } else {\n    // total pages more than max so calculate start and end pages\n    var maxPagesBeforeCurrentPage = Math.floor(maxPages / 2);\n    var maxPagesAfterCurrentPage = Math.ceil(maxPages / 2) - 1;\n\n    if (currentPage <= maxPagesBeforeCurrentPage) {\n      // current page near the start\n      startPage = 1;\n      endPage = maxPages;\n    } else if (currentPage + maxPagesAfterCurrentPage >= totalPages) {\n      // current page near the end\n      startPage = totalPages - maxPages + 1;\n      endPage = totalPages;\n    } else {\n      // current page somewhere in the middle\n      startPage = currentPage - maxPagesBeforeCurrentPage;\n      endPage = currentPage + maxPagesAfterCurrentPage;\n    }\n  } // calculate start and end item indexes\n\n\n  var startIndex = (currentPage - 1) * pageSize;\n  var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1); // create an array of pages to ng-repeat in the pager control\n\n  var pages = Array.from(Array(endPage + 1 - startPage).keys()).map(function (i) {\n    return startPage + i;\n  }); // return object with all pager properties required by the view\n\n  return {\n    totalItems: totalItems,\n    currentPage: currentPage,\n    pageSize: pageSize,\n    totalPages: totalPages,\n    startPage: startPage,\n    endPage: endPage,\n    startIndex: startIndex,\n    endIndex: endIndex,\n    pages: pages\n  };\n}\n\nmodule.exports = paginate;","map":{"version":3,"sources":["/home/sammyb/gee_collections/gee_collections_vue/node_modules/jw-paginate/lib/jw-paginate.js"],"names":["paginate","totalItems","currentPage","pageSize","maxPages","totalPages","Math","ceil","startPage","endPage","maxPagesBeforeCurrentPage","floor","maxPagesAfterCurrentPage","startIndex","endIndex","min","pages","Array","from","keys","map","i","module","exports"],"mappings":"AAAA;;AACA,SAASA,QAAT,CAAkBC,UAAlB,EAA8BC,WAA9B,EAA2CC,QAA3C,EAAqDC,QAArD,EAA+D;AAC3D,MAAIF,WAAW,KAAK,KAAK,CAAzB,EAA4B;AAAEA,IAAAA,WAAW,GAAG,CAAd;AAAkB;;AAChD,MAAIC,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AAAEA,IAAAA,QAAQ,GAAG,EAAX;AAAgB;;AAC3C,MAAIC,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AAAEA,IAAAA,QAAQ,GAAG,EAAX;AAAgB,GAHgB,CAI3D;;;AACA,MAAIC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUN,UAAU,GAAGE,QAAvB,CAAjB,CAL2D,CAM3D;;AACA,MAAID,WAAW,GAAG,CAAlB,EAAqB;AACjBA,IAAAA,WAAW,GAAG,CAAd;AACH,GAFD,MAGK,IAAIA,WAAW,GAAGG,UAAlB,EAA8B;AAC/BH,IAAAA,WAAW,GAAGG,UAAd;AACH;;AACD,MAAIG,SAAJ,EAAeC,OAAf;;AACA,MAAIJ,UAAU,IAAID,QAAlB,EAA4B;AACxB;AACAI,IAAAA,SAAS,GAAG,CAAZ;AACAC,IAAAA,OAAO,GAAGJ,UAAV;AACH,GAJD,MAKK;AACD;AACA,QAAIK,yBAAyB,GAAGJ,IAAI,CAACK,KAAL,CAAWP,QAAQ,GAAG,CAAtB,CAAhC;AACA,QAAIQ,wBAAwB,GAAGN,IAAI,CAACC,IAAL,CAAUH,QAAQ,GAAG,CAArB,IAA0B,CAAzD;;AACA,QAAIF,WAAW,IAAIQ,yBAAnB,EAA8C;AAC1C;AACAF,MAAAA,SAAS,GAAG,CAAZ;AACAC,MAAAA,OAAO,GAAGL,QAAV;AACH,KAJD,MAKK,IAAIF,WAAW,GAAGU,wBAAd,IAA0CP,UAA9C,EAA0D;AAC3D;AACAG,MAAAA,SAAS,GAAGH,UAAU,GAAGD,QAAb,GAAwB,CAApC;AACAK,MAAAA,OAAO,GAAGJ,UAAV;AACH,KAJI,MAKA;AACD;AACAG,MAAAA,SAAS,GAAGN,WAAW,GAAGQ,yBAA1B;AACAD,MAAAA,OAAO,GAAGP,WAAW,GAAGU,wBAAxB;AACH;AACJ,GAtC0D,CAuC3D;;;AACA,MAAIC,UAAU,GAAG,CAACX,WAAW,GAAG,CAAf,IAAoBC,QAArC;AACA,MAAIW,QAAQ,GAAGR,IAAI,CAACS,GAAL,CAASF,UAAU,GAAGV,QAAb,GAAwB,CAAjC,EAAoCF,UAAU,GAAG,CAAjD,CAAf,CAzC2D,CA0C3D;;AACA,MAAIe,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAAER,OAAO,GAAG,CAAX,GAAgBD,SAAjB,CAAL,CAAiCW,IAAjC,EAAX,EAAoDC,GAApD,CAAwD,UAAUC,CAAV,EAAa;AAAE,WAAOb,SAAS,GAAGa,CAAnB;AAAuB,GAA9F,CAAZ,CA3C2D,CA4C3D;;AACA,SAAO;AACHpB,IAAAA,UAAU,EAAEA,UADT;AAEHC,IAAAA,WAAW,EAAEA,WAFV;AAGHC,IAAAA,QAAQ,EAAEA,QAHP;AAIHE,IAAAA,UAAU,EAAEA,UAJT;AAKHG,IAAAA,SAAS,EAAEA,SALR;AAMHC,IAAAA,OAAO,EAAEA,OANN;AAOHI,IAAAA,UAAU,EAAEA,UAPT;AAQHC,IAAAA,QAAQ,EAAEA,QARP;AASHE,IAAAA,KAAK,EAAEA;AATJ,GAAP;AAWH;;AACDM,MAAM,CAACC,OAAP,GAAiBvB,QAAjB","sourcesContent":["\"use strict\";\nfunction paginate(totalItems, currentPage, pageSize, maxPages) {\n    if (currentPage === void 0) { currentPage = 1; }\n    if (pageSize === void 0) { pageSize = 10; }\n    if (maxPages === void 0) { maxPages = 10; }\n    // calculate total pages\n    var totalPages = Math.ceil(totalItems / pageSize);\n    // ensure current page isn't out of range\n    if (currentPage < 1) {\n        currentPage = 1;\n    }\n    else if (currentPage > totalPages) {\n        currentPage = totalPages;\n    }\n    var startPage, endPage;\n    if (totalPages <= maxPages) {\n        // total pages less than max so show all pages\n        startPage = 1;\n        endPage = totalPages;\n    }\n    else {\n        // total pages more than max so calculate start and end pages\n        var maxPagesBeforeCurrentPage = Math.floor(maxPages / 2);\n        var maxPagesAfterCurrentPage = Math.ceil(maxPages / 2) - 1;\n        if (currentPage <= maxPagesBeforeCurrentPage) {\n            // current page near the start\n            startPage = 1;\n            endPage = maxPages;\n        }\n        else if (currentPage + maxPagesAfterCurrentPage >= totalPages) {\n            // current page near the end\n            startPage = totalPages - maxPages + 1;\n            endPage = totalPages;\n        }\n        else {\n            // current page somewhere in the middle\n            startPage = currentPage - maxPagesBeforeCurrentPage;\n            endPage = currentPage + maxPagesAfterCurrentPage;\n        }\n    }\n    // calculate start and end item indexes\n    var startIndex = (currentPage - 1) * pageSize;\n    var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n    // create an array of pages to ng-repeat in the pager control\n    var pages = Array.from(Array((endPage + 1) - startPage).keys()).map(function (i) { return startPage + i; });\n    // return object with all pager properties required by the view\n    return {\n        totalItems: totalItems,\n        currentPage: currentPage,\n        pageSize: pageSize,\n        totalPages: totalPages,\n        startPage: startPage,\n        endPage: endPage,\n        startIndex: startIndex,\n        endIndex: endIndex,\n        pages: pages\n    };\n}\nmodule.exports = paginate;\n"]},"metadata":{},"sourceType":"script"}