{"ast":null,"code":"export default {\n  name: 'SearchAutocomplete',\n  props: {\n    items: {\n      type: Array,\n      required: false,\n      default: () => []\n    }\n  },\n\n  data() {\n    return {\n      search: 'hello',\n      results: [],\n      isOpen: false,\n      arrowCounter: -1\n    };\n  },\n\n  mounted() {\n    document.addEventListener('click', this.handleClickOutside);\n  },\n\n  destroyed() {\n    document.removeEventListener('click', this.handleClickOutside);\n  },\n\n  methods: {\n    filterResults() {\n      let newArray = [];\n\n      for (let i = 0; i < this.items.length; i++) {\n        newArray.push(this.items[i].name);\n      }\n\n      this.results = newArray.filter(item => item.toLowerCase().indexOf(this.search.toLowerCase()) > -1); // this.results = this.items.filter(item => item.toLowerCase().indexOf(this.search.toLowerCase()) > -1);\n    },\n\n    onChange() {\n      this.filterResults();\n      this.isOpen = true;\n    },\n\n    setResult(result) {\n      this.search = result;\n      this.isOpen = false;\n      this.$router.push('/search');\n      this.emitter.emit('my-event', {\n        'eventContent': result\n      });\n    },\n\n    handleClickOutside(event) {\n      if (!this.$el.contains(event.target)) {\n        this.arrowCounter = -1;\n        this.isOpen = false;\n      }\n    },\n\n    onArrowDown() {\n      if (this.arrowCounter < this.results.length) {\n        this.arrowCounter = this.arrowCounter + 1;\n      }\n    },\n\n    onArrowUp() {\n      if (this.arrowCounter > 0) {\n        this.arrowCounter = this.arrowCounter - 1;\n      }\n    },\n\n    onEnter() {\n      this.search = this.results[this.arrowCounter];\n      this.arrowCounter = -1;\n      this.isOpen = false;\n      this.$router.push('/search');\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAuBA,eAAe;AACbA,MAAI,EAAE,oBADO;AAEbC,OAAK,EAAE;AACLC,SAAK,EAAE;AACLC,UAAI,EAAEC,KADD;AAELC,cAAQ,EAAE,KAFL;AAGLC,aAAO,EAAE,MAAM;AAHV;AADF,GAFM;;AASbC,MAAI,GAAG;AACL,WAAO;AACLC,YAAM,EAAE,OADH;AAELC,aAAO,EAAE,EAFJ;AAGLC,YAAM,EAAE,KAHH;AAILC,kBAAY,EAAE,CAAC;AAJV,KAAP;AAMD,GAhBY;;AAiBbC,SAAO,GAAG;AACRC,YAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmC,KAAKC,kBAAxC;AACD,GAnBY;;AAoBbC,WAAS,GAAG;AACVH,YAAQ,CAACI,mBAAT,CAA6B,OAA7B,EAAsC,KAAKF,kBAA3C;AACD,GAtBY;;AAuBbG,SAAO,EAAE;AACPC,iBAAa,GAAG;AACd,UAAIC,QAAO,GAAI,EAAf;;AACA,WAAK,IAAIC,CAAC,GAAC,CAAX,EAAeA,CAAC,GAAC,KAAKnB,KAAL,CAAWoB,MAA5B,EAAqCD,CAAC,EAAtC,EAAyC;AACvCD,gBAAQ,CAACG,IAAT,CAAc,KAAKrB,KAAL,CAAWmB,CAAX,EAAcrB,IAA5B;AACF;;AACA,WAAKS,OAAL,GAAeW,QAAQ,CAACI,MAAT,CAAgBC,IAAG,IAAKA,IAAI,CAACC,WAAL,GAAmBC,OAAnB,CAA2B,KAAKnB,MAAL,CAAYkB,WAAZ,EAA3B,IAAwD,CAAC,CAAjF,CAAf,CALc,CAMd;AACD,KARM;;AASPE,YAAQ,GAAG;AACT,WAAKT,aAAL;AACA,WAAKT,MAAL,GAAc,IAAd;AACD,KAZM;;AAaPmB,aAAS,CAACC,MAAD,EAAS;AAChB,WAAKtB,MAAL,GAAcsB,MAAd;AACA,WAAKpB,MAAL,GAAc,KAAd;AACA,WAAKqB,OAAL,CAAaR,IAAb,CAAkB,SAAlB;AACA,WAAKS,OAAL,CAAaC,IAAb,CAAkB,UAAlB,EAA8B;AAAC,wBAAgBH;AAAjB,OAA9B;AACD,KAlBM;;AAmBPf,sBAAkB,CAACmB,KAAD,EAAQ;AACxB,UAAI,CAAC,KAAKC,GAAL,CAASC,QAAT,CAAkBF,KAAK,CAACG,MAAxB,CAAL,EAAsC;AACpC,aAAK1B,YAAL,GAAoB,CAAC,CAArB;AACA,aAAKD,MAAL,GAAc,KAAd;AACF;AACD,KAxBM;;AAyBP4B,eAAW,GAAG;AACZ,UAAI,KAAK3B,YAAL,GAAoB,KAAKF,OAAL,CAAaa,MAArC,EAA6C;AAC3C,aAAKX,YAAL,GAAoB,KAAKA,YAAL,GAAoB,CAAxC;AACF;AACD,KA7BM;;AA8BP4B,aAAS,GAAG;AACV,UAAI,KAAK5B,YAAL,GAAoB,CAAxB,EAA2B;AACzB,aAAKA,YAAL,GAAoB,KAAKA,YAAL,GAAoB,CAAxC;AACF;AACD,KAlCM;;AAmCP6B,WAAO,GAAG;AACR,WAAKhC,MAAL,GAAc,KAAKC,OAAL,CAAa,KAAKE,YAAlB,CAAd;AACA,WAAKA,YAAL,GAAoB,CAAC,CAArB;AACA,WAAKD,MAAL,GAAc,KAAd;AACA,WAAKqB,OAAL,CAAaR,IAAb,CAAkB,SAAlB;AACD;;AAxCM;AAvBI,CAAf","names":["name","props","items","type","Array","required","default","data","search","results","isOpen","arrowCounter","mounted","document","addEventListener","handleClickOutside","destroyed","removeEventListener","methods","filterResults","newArray","i","length","push","filter","item","toLowerCase","indexOf","onChange","setResult","result","$router","emitter","emit","event","$el","contains","target","onArrowDown","onArrowUp","onEnter"],"sourceRoot":"","sources":["/home/sammyb/gee_collections/gee_collections_vue/src/components/SearchAutoComplete.vue"],"sourcesContent":["<template>\n  <div class=\"autocomplete\">\n    <input \n    v-model=\"search\" \n    @input=\"onChange\" \n    @keydown.down=\"onArrowDown\"\n    @keydown.up=\"onArrowUp\"\n    @keydown.enter=\"onEnter\"\n    type=\"text\"\n    />\n    <ul class=\"autocomplete-results\" v-show=\"isOpen\">\n      <li class=\"autocomplete-result\"\n       v-for=\"(result, i) in results\" :key=\"i\"\n        @click=\"setResult(result)\"\n        :class=\"{ 'is-active': i === arrowCounter }\"\n        >\n        {{ result }}\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'SearchAutocomplete',\n  props: {\n    items: {\n      type: Array,\n      required: false,\n      default: () => [],\n    },\n  },\n  data() {\n    return {\n      search: 'hello',\n      results: [],\n      isOpen: false,\n      arrowCounter: -1\n    };\n  },\n  mounted() {\n    document.addEventListener('click', this.handleClickOutside);\n  },\n  destroyed() {\n    document.removeEventListener('click', this.handleClickOutside);\n  },\n  methods: {\n    filterResults() {\n      let newArray = []\n      for (let i=0 ; i<this.items.length ; i++){\n        newArray.push(this.items[i].name)\n      }\n      this.results = newArray.filter(item => item.toLowerCase().indexOf(this.search.toLowerCase()) > -1);\n      // this.results = this.items.filter(item => item.toLowerCase().indexOf(this.search.toLowerCase()) > -1);\n    },\n    onChange() {\n      this.filterResults();\n      this.isOpen = true;\n    },\n    setResult(result) {\n      this.search = result;\n      this.isOpen = false;\n      this.$router.push('/search')\n      this.emitter.emit('my-event', {'eventContent': result})\n    },\n    handleClickOutside(event) {\n      if (!this.$el.contains(event.target)) {\n        this.arrowCounter = -1;\n        this.isOpen = false;\n      }\n    },\n    onArrowDown() {\n      if (this.arrowCounter < this.results.length) {\n        this.arrowCounter = this.arrowCounter + 1;\n      }\n    },\n    onArrowUp() {\n      if (this.arrowCounter > 0) {\n        this.arrowCounter = this.arrowCounter - 1;\n      }\n    },\n    onEnter() {\n      this.search = this.results[this.arrowCounter];\n      this.arrowCounter = -1;\n      this.isOpen = false;\n      this.$router.push('/search')\n    },\n  },\n};\n</script>\n\n<style>\n  .autocomplete {\n    position: relative;\n  }\n\n  .autocomplete-results {\n    padding: 0;\n    margin: 0;\n    border: 1px solid #eeeeee;\n    height: 120px;\n    min-height: 1em;\n    max-height: 6em;    \n    overflow: auto;\n    display: block;\n  }\n\n  .autocomplete-result {\n    list-style: none;\n    text-align: left;\n    padding: 4px 2px;\n    cursor: pointer;\n  }\n\n  .autocomplete-result.is-active,\n  .autocomplete-result:hover {\n    background-color: #4AAE9B;\n    color: white;\n  }\n</style>"]},"metadata":{},"sourceType":"module"}