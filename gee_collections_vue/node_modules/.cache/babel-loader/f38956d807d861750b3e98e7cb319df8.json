{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vShow as _vShow } from \"vue\";\nconst _hoisted_1 = {\n  class: \"autocomplete\"\n};\nconst _hoisted_2 = {\n  class: \"autocomplete-results\"\n};\nconst _hoisted_3 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.search = $event),\n    onInput: _cache[1] || (_cache[1] = (...args) => $options.onChange && $options.onChange(...args)),\n    type: \"text\"\n  }, null, 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  ), [[_vModelText, $data.search]]), _withDirectives(_createElementVNode(\"ul\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.results, (result, i) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      class: \"autocomplete-result\",\n      key: i,\n      onClick: $event => $options.setResult(result)\n    }, _toDisplayString(result), 9\n    /* TEXT, PROPS */\n    , _hoisted_3);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))], 512\n  /* NEED_PATCH */\n  ), [[_vShow, $data.isOpen]])]);\n}","map":{"version":3,"mappings":";;AACOA,OAAK,EAAC;;;AAELA,OAAK,EAAC;;;;uBAFZC,oBASM,KATN,cASM,iBARJC,oBAAuD,OAAvD,EAAuD;+DAAvCC,eAAMC,OAAiC;AAA9BC,WAAK,yCAAEC,+CAAF,CAAyB;AAAbC,QAAI,EAAC;AAAQ,GAAvD;;AAAA,oBAAgBJ,eAQZ,kBAPJD,oBAMK,IANL,cAMK,oBALHD,oBAIKO,SAJL,EAIK,IAJL,EAIKC,YAHkBN,aAGlB,EAHyB,CAArBO,MAAqB,EAAbC,CAAa,KAAZ;yBADlBV,oBAIK,IAJL,EAIK;AAJDD,WAAK,EAAC,qBAIL;AAH4BY,SAAG,EAAED,CAGjC;AAFFE,aAAK,YAAEP,mBAAUI,MAAV;AAEL,KAJL,mBAGKA,OAHL,EAGW;AAAA;AAHX,MAGWI,UAHX;GAIK,CAJL;;AAAA,GAKG,EANL;;AAAA,eAAyCX,eAOrC,CATN","names":["class","_createElementBlock","_createElementVNode","$data","$event","onInput","$options","type","_Fragment","_renderList","result","i","key","onClick","_hoisted_3"],"sourceRoot":"","sources":["/home/sammyb/gee_collections/gee_collections_vue/src/components/SearchAutoComplete.vue"],"sourcesContent":["<template>\n  <div class=\"autocomplete\">\n    <input v-model=\"search\" @input=\"onChange\" type=\"text\"/>\n    <ul class=\"autocomplete-results\" v-show=\"isOpen\">\n      <li class=\"autocomplete-result\"\n       v-for=\"(result, i) in results\" :key=\"i\"\n        @click=\"setResult(result)\">\n        {{ result }}\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'SearchAutocomplete',\n  props: {\n    items: {\n      type: Array,\n      required: false,\n      default: () => [],\n    },\n  },\n  data() {\n    return {\n      search: '',\n      results: [],\n      isOpen: false,\n    };\n  },\n  mounted() {\n    document.addEventListener('click', this.handleClickOutside);\n  },\n  destroyed() {\n    document.removeEventListener('click', this.handleClickOutside);\n  },\n  methods: {\n    filterResults() {\n      console.log('the items are',this.items.name)\n      // this.results = this.items.filter(item => item.toLowerCase().indexOf(this.search.toLowerCase()) > -1);\n    },\n    onChange() {\n      this.filterResults();\n      this.isOpen = true;\n    },\n    setResult(result) {\n      this.search = result;\n      this.isOpen = false;\n    },\n    handleClickOutside(event) {\n      if (!this.$el.contains(event.target)) {\n        this.isOpen = false;\n      }\n    }\n  },\n};\n</script>\n\n<style>\n  .autocomplete {\n    position: relative;\n  }\n\n  .autocomplete-results {\n    padding: 0;\n    margin: 0;\n    border: 1px solid #eeeeee;\n    height: 120px;\n    min-height: 1em;\n    max-height: 6em;    \n    overflow: auto;\n  }\n\n  .autocomplete-result {\n    list-style: none;\n    text-align: left;\n    padding: 4px 2px;\n    cursor: pointer;\n  }\n\n  .autocomplete-result:hover {\n    background-color: #4AAE9B;\n    color: white;\n  }\n</style>"]},"metadata":{},"sourceType":"module"}