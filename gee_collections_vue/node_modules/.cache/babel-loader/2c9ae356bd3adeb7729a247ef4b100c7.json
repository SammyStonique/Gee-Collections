{"ast":null,"code":"export default {\n  props: {\n    maxVisibleButtons: {\n      type: Number,\n      required: false,\n      default: 5\n    },\n    totalPages: {\n      type: Number,\n      required: true\n    },\n    totalItems: {\n      type: Number,\n      required: true\n    },\n    perPage: {\n      type: Number,\n      required: true\n    },\n    currentPage: {\n      type: Number,\n      required: true\n    }\n  },\n\n  data() {\n    return {};\n  },\n\n  computed: {\n    startPage() {\n      if (this.currentPage === 1) // while on first page\n        {\n          return 1;\n        }\n\n      if (this.currentPage === this.totalPages) // while on last page\n        {\n          return this.totalPages - this.maxVisibleButtons + 1; // const start = this.totalPages - (this.maxVisibleButtons - 1);\n          // if(start === 0) \n          // {\n          //     return 1;\n          // }\n          // else \n          // {\n          //     return start;\n          // }\n        }\n\n      return this.currentPage - 1; // while in between fisrt and last\n    },\n\n    endPage() {\n      return Math.min(this.startPage + this.maxVisibleButtons - 1, this.totalPages);\n    },\n\n    pages() {\n      const pageRange = []; // Math.min(this.startPage + this.maxVisiblePages - 1, this.totalPages) / this.endPage;\n\n      for (let i = this.startPage; i <= Math.min(this.startPage + this.maxVisibleButtons - 1, this.totalPages); i++) {\n        pageRange.push({\n          name: i,\n          isDisabled: i === this.currentPage\n        });\n      }\n\n      return pageRange;\n    },\n\n    // for event listeners\n    isInFirstPage() {\n      return this.currentPage === 1;\n    },\n\n    isInLastPage() {\n      return this.currentPage === this.totalPages;\n    }\n\n  },\n  methods: {\n    onClickFirstPage() {\n      this.$emit('page-changed', 1);\n    },\n\n    onClickPreviousPage() {\n      this.$emit('page-changed', this.currentPage - 1);\n    },\n\n    onClickPage(page) {\n      this.$emit('page-changed', page);\n    },\n\n    onClickNextPage() {\n      this.$emit('page-changed', this.currentPage + 1);\n    },\n\n    onClickLastPage() {\n      this.$emit('page-changed', this.totalPages);\n    }\n\n  },\n\n  mounted() {// console.log(`on pages ::: pages are ::: ${this.totalPages}`)\n  },\n\n  updated() {}\n\n};","map":{"version":3,"mappings":"AA6DA,eAAe;AACXA,OAAK,EAAE;AACHC,qBAAiB,EAAE;AACfC,UAAI,EAAEC,MADS;AAEfC,cAAQ,EAAE,KAFK;AAGfC,aAAO,EAAE;AAHM,KADhB;AAMHC,cAAU,EAAE;AACRJ,UAAI,EAAEC,MADE;AAERC,cAAQ,EAAE;AAFF,KANT;AAUHG,cAAU,EAAE;AACRL,UAAI,EAAEC,MADE;AAERC,cAAQ,EAAE;AAFF,KAVT;AAcHI,WAAO,EAAE;AACLN,UAAI,EAAEC,MADD;AAELC,cAAQ,EAAE;AAFL,KAdN;AAkBHK,eAAW,EAAE;AACTP,UAAI,EAAEC,MADG;AAETC,cAAQ,EAAE;AAFD;AAlBV,GADI;;AAyBXM,MAAI,GACJ;AACI,WAAO,EAAP;AAGH,GA9BU;;AAgCXC,UAAQ,EAAE;AACNC,aAAS,GACT;AACI,UAAG,KAAKH,WAAL,KAAqB,CAAxB,EAA2B;AAC3B;AACI,iBAAO,CAAP;AACJ;;AAEA,UAAG,KAAKA,WAAL,KAAqB,KAAKH,UAA7B,EAAyC;AACzC;AACI,iBAAO,KAAKA,UAAL,GAAkB,KAAKL,iBAAvB,GAA2C,CAAlD,CADJ,CAEI;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;;AAEA,aAAO,KAAKQ,WAAL,GAAmB,CAA1B,CArBJ,CAqBiC;AAChC,KAxBK;;AA0BNI,WAAO,GACP;AACI,aAAOC,IAAI,CAACC,GAAL,CAAS,KAAKH,SAAL,GAAiB,KAAKX,iBAAtB,GAA0C,CAAnD,EAAsD,KAAKK,UAA3D,CAAP;AACH,KA7BK;;AA+BNU,SAAK,GACL;AACI,YAAMC,SAAQ,GAAI,EAAlB,CADJ,CAEI;;AAEA,WAAI,IAAIC,IAAI,KAAKN,SAAjB,EAA4BM,KAAKJ,IAAI,CAACC,GAAL,CAAS,KAAKH,SAAL,GAAiB,KAAKX,iBAAtB,GAA0C,CAAnD,EAAsD,KAAKK,UAA3D,CAAjC,EAAyGY,CAAC,EAA1G,EACA;AACID,iBAAS,CAACE,IAAV,CAAe;AACXC,cAAI,EAAEF,CADK;AAEXG,oBAAU,EAAEH,MAAM,KAAKT;AAFZ,SAAf;AAIJ;;AAEA,aAAOQ,SAAP;AACH,KA7CK;;AA+CN;AACAK,iBAAa,GACb;AACI,aAAO,KAAKb,WAAL,KAAqB,CAA5B;AACH,KAnDK;;AAoDNc,gBAAY,GACZ;AACI,aAAO,KAAKd,WAAL,KAAqB,KAAKH,UAAjC;AACJ;;AAvDM,GAhCC;AA0FXkB,SAAO,EAAE;AACLC,oBAAgB,GAChB;AACI,WAAKC,KAAL,CAAW,cAAX,EAA2B,CAA3B;AACH,KAJI;;AAKLC,uBAAmB,GACnB;AACI,WAAKD,KAAL,CAAW,cAAX,EAA2B,KAAKjB,WAAL,GAAmB,CAA9C;AACH,KARI;;AASLmB,eAAW,CAACC,IAAD,EACX;AACI,WAAKH,KAAL,CAAW,cAAX,EAA2BG,IAA3B;AACH,KAZI;;AAaLC,mBAAe,GACf;AACI,WAAKJ,KAAL,CAAW,cAAX,EAA2B,KAAKjB,WAAL,GAAmB,CAA9C;AACH,KAhBI;;AAiBLsB,mBAAe,GACf;AACI,WAAKL,KAAL,CAAW,cAAX,EAA2B,KAAKpB,UAAhC;AACH;;AApBI,GA1FE;;AAgHX0B,SAAO,GACP,CACI;AACH,GAnHU;;AAqHXC,SAAO,GACP,CAEA;;AAxHW,CAAf","names":["props","maxVisibleButtons","type","Number","required","default","totalPages","totalItems","perPage","currentPage","data","computed","startPage","endPage","Math","min","pages","pageRange","i","push","name","isDisabled","isInFirstPage","isInLastPage","methods","onClickFirstPage","$emit","onClickPreviousPage","onClickPage","page","onClickNextPage","onClickLastPage","mounted","updated"],"sourceRoot":"","sources":["/home/sammyb/gee_collections/gee_collections_vue/src/components/Pagination.vue"],"sourcesContent":["<template>\n    <div class=\"section\"> \n        <div class=\"pull-right\">\n            <div class=\"pagination\">\n                <ul>\n                    <!-- <li>\n                        <a\n                            class=\"btn\"\n                            @click.prevent=\"onClickFirstPage\" \n                            :disabled=\"isInFirstPage\"\n                        >\n                        First\n                        </a>\n                    </li> -->\n                    <li>\n                        <a\n                            class=\"btn\"\n                            @click=\"onClickPreviousPage\" \n                            :disabled=\"isInFirstPage\"\n                        >\n                        Prev\n                        </a>\n                    </li>\n\n                    <!-- visible as start -->\n                    <li v-for=\"page in pages\" :key=\"page.name\">\n                        <a\n                            class=\"btn\"\n                            @click=\"onClickPage(page.name)\"\n                            :disabled=\"page.isDisabled\"\n                        >\n                        {{page.name}}\n                        </a>\n                    </li>\n                    <!-- visible as end -->\n\n                    <li>\n                        <a\n                            class=\"btn\"\n                            @click=\"onClickNextPage\" \n                            :disabled=\"isInLastPage\"\n                        >\n                        Next\n                        </a>\n                    </li>\n                    <!-- <li>\n                        <a\n                            class=\"btn\"\n                            @click=\"onClickLastPage\" \n                            :disabled=\"isInLastPage\"\n                        >\n                        Last\n                        </a>\n                    </li> -->\n                </ul>\n            </div>\n        </div>                \n    </div>\n</template>\n\n<script>\nexport default {\n    props: {\n        maxVisibleButtons: {\n            type: Number,\n            required: false,\n            default: 5\n        },\n        totalPages: {\n            type: Number,\n            required: true,\n        },\n        totalItems: {\n            type: Number,\n            required: true\n        },\n        perPage: {\n            type: Number,\n            required: true,\n        },\n        currentPage: {\n            type: Number,\n            required: true\n        }\n    },\n\n    data() \n    {\n        return {\n            \n        }\n    },\n\n    computed: {\n        startPage() \n        {\n            if(this.currentPage === 1) // while on first page\n            {\n                return 1;\n            }\n            \n            if(this.currentPage === this.totalPages) // while on last page\n            {\n                return this.totalPages - this.maxVisibleButtons + 1;\n                // const start = this.totalPages - (this.maxVisibleButtons - 1);\n\n                // if(start === 0) \n                // {\n                //     return 1;\n                // }\n                // else \n                // {\n                //     return start;\n                // }\n            }\n\n            return this.currentPage - 1; // while in between fisrt and last\n        },\n\n        endPage() \n        {\n            return Math.min(this.startPage + this.maxVisibleButtons - 1, this.totalPages);\n        },\n\n        pages() \n        {\n            const pageRange = [];\n            // Math.min(this.startPage + this.maxVisiblePages - 1, this.totalPages) / this.endPage;\n\n            for(let i = this.startPage; i <= Math.min(this.startPage + this.maxVisibleButtons - 1, this.totalPages); i++)\n            {\n                pageRange.push({\n                    name: i,\n                    isDisabled: i === this.currentPage\n                });\n            }\n\n            return pageRange;\n        },\n\n        // for event listeners\n        isInFirstPage() \n        {\n            return this.currentPage === 1;\n        },\n        isInLastPage() \n        {\n            return this.currentPage === this.totalPages;\n        }\n    },\n\n    methods: {\n        onClickFirstPage() \n        {\n            this.$emit('page-changed', 1);\n        },\n        onClickPreviousPage() \n        {\n            this.$emit('page-changed', this.currentPage - 1);\n        },\n        onClickPage(page) \n        {\n            this.$emit('page-changed', page);\n        },\n        onClickNextPage() \n        {\n            this.$emit('page-changed', this.currentPage + 1);\n        },\n        onClickLastPage() \n        {\n            this.$emit('page-changed', this.totalPages);\n        },\n    },\n    mounted() \n    {\n        // console.log(`on pages ::: pages are ::: ${this.totalPages}`)\n    },\n\n    updated() \n    {\n        \n    }\n\n}\n</script>"]},"metadata":{},"sourceType":"module"}